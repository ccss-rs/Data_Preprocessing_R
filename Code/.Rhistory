df4$proportion <- df4$value/df4$total
View(df4)
df4 <- df4 %>%
mutate(proportion = as.numeric(value)/total)
View(df4)
#Create Graphs. frequency counts
bar_plot <-
df4 %>%
ggplot(aes(x=cons, y=value, fill=name)) +
geom_col(position="dodge", color='gray50', width=0.7) +
scale_fill_viridis_d()
bar_plot
#Create graph. proportion
bar_plot <-
df4 %>%
ggplot(aes(x=cons, y=proportion, fill=name)) +
geom_col(position="dodge", color='gray50', width=0.7) +
scale_fill_viridis_d()
bar_plot
data_copy$cons <- "mainvar2"
names(data_copy)[names(data_copy)=="cons"] <- "cons2"
View(data_copy)
#Combine dataset to mimic format of your data.
data_comb <- merge(df, data_copy, by="id", all.x = TRUE, all.y = TRUE)
df$id <- 1
data_copy$id <- 2
#Combine dataset to mimic format of your data.
data_comb <- merge(df, data_copy, by="id", all.x = TRUE, all.y = TRUE)
#Combine the data into 1 variable
result <- data_comb %>%
mutate(type = case_when(cons == "main_var" ~ "main1",
cons2 == "mainvar2" ~ "main2"))
View(result)
#Replace all missing values with 0
result[is.na(result)] <- 0
#Create summary stats
result2 <- result %>%
group_by(type) %>%
summarise(total_app = sum(apples.x, apples.y),
total_pears = sum(pears.x, pears.y),
total_orange = sum(oranges.x, oranges.y),
total_grapes = sum(grapes.x, grapes.y))
#Restructure data.
result3 <- result2 %>% pivot_longer(cols = -type) %>%
mutate(value = factor(value))
View(result2)
View(result3)
#Now look at counts split by main variable.
bar_plot <-
result3 %>%
ggplot(aes(x=type, y=value, fill=name)) +
geom_col(position="dodge", color='gray50', width=0.7) +
scale_fill_viridis_d()
bar_plot
View(result3)
totals <- result3 %>%
group_by(type) %>%
summarise(total = as.numeric(as.character(value)))
View(totals)
totals <- result3 %>%
group_by(type) %>%
summarise(total = sum(as.numeric(as.character(value))))
View(totals)
#Merge back to the original dataset
result4 <- merge(result3, totals, by="type")
View(result4)
#Change the numbers a bit for better display
result3 <- result3 %>%
mutate(value = ifelse(type == "main2", as.numeric(as.character(value)) + 5, as.numeric(as.character(value))))
totals <- result3 %>%
group_by(type) %>%
summarise(total = sum(as.numeric(as.character(value))))
#Merge back to the original dataset
result4 <- merge(result3, totals, by="type")
#Now look at counts split by main variable.
bar_plot <-
result3 %>%
ggplot(aes(x=type, y=value, fill=name)) +
geom_col(position="dodge", color='gray50', width=0.7) +
scale_fill_viridis_d()
bar_plot
#Same thing with proportions
bar_plot <-
result3 %>%
ggplot(aes(x=type, y=value, fill=name)) +
geom_col(position="dodge", color='gray50', width=0.7) +
scale_fill_viridis_d()
bar_plot
result4$proportion <- result4$value/result4$total
#Same thing with proportions
bar_plot <-
result4 %>%
ggplot(aes(x=type, y=proportion, fill=name)) +
geom_col(position="dodge", color='gray50', width=0.7) +
scale_fill_viridis_d()
bar_plot
p <- ggplot(result4, aes(x=name, y=proportion, colour = type)) + geom_line()
p
p <- ggplot(result4, aes(x=name, y=proportion)) + geom_line()
p
p <- ggplot(result4, aes(x=type, y=proportion, colour = name)) + geom_line()
p
p <- ggplot(result4, aes(x=name, y=proportion, colour = type)) + geom_line()
p
p <- ggplot(result4, aes(x=name, y=proportion)) + geom_line()
p
class(result4$type)
class(result4$name)
class(result4$value)
class(result4$proportion)
library(tidyverse)
set.seed(12345)
eat <- sample(1:7, size = 30, replace = T)
df <- data.frame(
Condition = rep(c(0, 1), each = 15),
time = c(1, 2, 3, 4, 5),
eat = eat
)
View(df)
class(df$Condition)
class(df$time)
class(df$eat)
p <- ggplot(result4, aes(x=as.factor(name), y=as.factor(proportion))) + geom_line()
p
p <- ggplot(result4, aes(x=as.factor(name), y=as.numeric(proportion))) + geom_line()
p
# Brownian motion
set.seed(2)
# Grid
t <- seq(0, 1, by = 0.001)
p <- length(t) - 1
# 5 paths
n <- 5
I <- matrix(rnorm(n * p, 0, 1 / sqrt(p)), n, p)
# Data frame
df1 <- data.frame(apply(I, 1, cumsum))
# install.packages("reshape")
library(reshape)
install.packages("reshape")
# install.packages("reshape")
library(reshape)
df <- data.frame(x = seq_along(df1[, 1]),
df1)
# Long format
df <- melt(df, id.vars = "x")
library(ggplot2)
ggplot(df, aes(x = x, y = value, color = variable)) +
geom_line()
View(df)
p <- ggplot(result4, aes(x=as.factor(name), y=as.numeric(proportion), color = type)) + geom_line()
p
p <- ggplot(result4, aes(x=as.numeric(as.factor(name)), y=as.numeric(proportion), color = type)) + geom_line()
p
source("Z:/jrg363/userconsultfiles/lizzette/las537.R", echo=TRUE)
str(mtcars)
#Rename individual column
#Import data
data_test = mtcars
#Look at variable names
str(data_test)
#Rename all variables.
colnames(data_test) <- c("MPG", "CYL")
str(data_test)
#Rename individual variable.
names(data_test)[names(data_test) == 'MPG'] <- 'mpg_lower'
str(data_test)
#Rename individual column
#Import data
data_test = mtcars
#Look at variable names
str(data_test)
#Rename individual variable.
#names(df)[names(df) == 'old.var.name'] <- 'new.var.name'
names(data_test)[names(data_test) == 'MPG'] <- 'mpg_lower'
str(data_test)
#Rename all variables. This sets the first 2 then missing for the rest. Need to enter every column. This may not be the most efficient since you need to
colnames(data_test) <- c("MPG", "CYL")
str(data_test)
#Rename individual column
#Import data
data_test = mtcars
#Look at variable names
str(data_test)
#Rename individual variable.
#names(df)[names(df) == 'old.var.name'] <- 'new.var.name'
names(data_test)[names(data_test) == 'MPG'] <- 'mpg_lower'
str(data_test)
#Rename individual variable.
#names(df)[names(df) == 'old.var.name'] <- 'new.var.name'
names(data_test)[names(data_test) == 'mpg'] <- 'mpg_lower'
str(data_test)
install.packages("purrr")
library(purrr)
data = mtcars
summary(mtcars)
lm(mpg ~ hp +disp )
lm(mpg ~ hp +disp, data = data )
library(tidyverse)
remotes::install_github("https://github.com/statnet/ergm.multi")
.libPaths()
library(remotes)
remotes::install_github("https://github.com/statnet/ergm")
remotes::install_github("https://github.com/statnet/ergm")
remotes::install_github("https://github.com/statnet/ergm.multi")
.libPaths()
library(ergm.multi, lib.loc = "C:/Users/jrg363/AppData/Local/R/win-library/4.2")
sessionInfo()
library(devtools)
# install.packages("devtools")
devtools::install_github(
"jonathanbratt/RBERT",
build_vignettes = TRUE
)
tensorflow::install_tensorflow(version = "1.13.1")
tensorflow::install_tensorflow(version = "2.13.1")
devtools::install_github("rstudio/reticulate")
getwd()
source("Z:/jrg363/Testing Applications/R, Rstudio/test_R_Rstudio.R", echo=TRUE)
install.packages("sandwich")
source("Z:/jrg363/Testing Applications/R, Rstudio/test_R_Rstudio.R", echo=TRUE)
?seq
#sc983. 1/10
Y <- 0.5
X <- seq(from = 1, to = 50)
individual <- x[1]
individual <- X[1]
individual <- X[2]
individual
?rep
#Create a dataframe of X and Y as constant.
ycord <- rep(Y, times = 50)
#Create dataframe
data <- data.frame(X, ycord)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
data <- data %>%
mutate(formula = ((X+2)(X-1)/(2*(X**2)))*ycord)
data <- data %>%
mutate(formula = ((X+2)(X-1)/(2*(X^2)))*ycord)
data <- data %>%
mutate(formula = ((X+2)(X-1)/(2*(X*2)))*ycord)
data <- data %>%
mutate(formula = ((X+2)(X-1)))
data <- data %>%
data <- data %>%
mutate(formula = ((X+2)))
data <- data %>%
mutate(formula = ((X+2)))
data <- data %>%
mutate(formula = ((X+2)*(X-1)/(2*(X*2)))*ycord)
View(data)
#Print results
results <- data$formula
results
#Plot results
plot(data$X, data$formula)
source("Z:/jrg363/userconsultfiles/sc983/1-10/code.R", echo=TRUE)
install.packages("tidyverse")
source("Z:/jrg363/userconsultfiles/sc983/1-10/code.R", echo=TRUE)
install.packages("devtools")
library(devtools)
?subset
getwd()
data = mtcars
View(data)
?lm
lm(mpg ~ wt + hp + disp)
lm(mpg ~ wt + hp + disp, data = data)
?stargazer
library(stargazer)
?stargazer
library(stargazer)
stargazer(mtcars, type= "text", title= "Summary Statistics", out= "dat1.text")
m1 <- lm(mpg ~ hp, mtcars)
m2 <- lm(mpg~ drat, mtcars)
m3 <- lm(mpg ~ hp + drat, mtcars)
stargazer(m1, m2, m3,
type = "html",
out = "reg1.html",
digits = 1,
header = FALSE,
title= "Regression Results",
covariate.labels = c("Horsepower", "Rear axle ratio"))
getwd()
model <- lm(mpg ~ hp + drat + wt, data = mtcars)
summary(model)
getwd()
source("~/.active-rstudio-document", echo=TRUE)
setwd("Z:\\jrg363\\Workshops Sp24\\R Data Processing AIshat\\Final")
mmALL_073120_csv <- read_csv("../Data/mmALL_073120_csv.csv")
library(tidyverse)
mmALL_073120_csv <- read_csv("../Data/mmALL_073120_csv.csv")
setwd("Z:\\jrg363\\Workshops Sp24\\R Data Processing AIshat\\Final")
mmALL_073120_csv <- read_csv("../Data/mmALL_073120_csv.csv")
setwd("Code")
mmALL_073120_csv <- read_csv("../Data/mmALL_073120_csv.csv")
global_population <- read_csv("../Data/population.csv") %>%
rename("country"="Country Name",
"population"="Value") %>%
select(-"Country Code")
save.image("../Data/mmALL_073120_csv.RData")
load("../Data/mmALL_073120_csv.RData"
)
###### run getwd()
getwd()
###### run list.files() to see all files in working directory
list.files()
###### Run list.files() with pattern = "Preproc" to find specific files
list.files(pattern = "Preproc")
## install.packages("tidyverse")
library(tidyverse)
library(help = "tidyverse")
###### Method 1 ######
# Mass_Mobilizaton_Data <- haven::read_dta("Mass_Mobilizaton_Data.dta")
###### Method 2 ######
load("../Data/mmALL_073120_csv.RData")
View(mmALL_073120_csv)
###### Method 3 w/dupes ######
mmALL_073120_csv <- read_csv("../Data/mmALL_073120_csv.csv")
View(mmALL_073120_csv)
###### View all column names in df ######
colnames(mmALL_073120_csv)
###### Braindump all potentially relevant variables/columns ######
PreprocData <- mmALL_073120_csv %>%
dplyr::select(protest, participants, participants_category, protestnumber, protesterviolence, region, year, country, ccode, id, startday, startmonth, startyear, endday, endmonth, endyear)
###### Filter rows by Region ######
preprec_North_America <- PreprocData %>%
filter(region == "North America")
View(preprec_North_America)
###### Remove the year column ######
PreprocData %>% select(-year)
###### Rename the columns w/ dplry and base R ######
PreprocData %>%
rename(countrycode = ccode)
names(PreprocData)[names(PreprocData) == "ccode"] <- "countrycode"
###### All together, magic of the pipe tool ######
PreprocData <- mmALL_073120_csv %>%
dplyr::select(protest, participants, participants_category, protestnumber, protesterviolence, region, year, country, ccode, id, startday, startmonth, startyear, endday, endmonth, endyear) %>%
select(-year) %>%
rename(countrycode = ccode)
###### View all column names in new df ######
colnames(PreprocData)
str(PreprocData)
## transforms selected vars
PreprocData_transformed <- PreprocData %>%
mutate(
participants = as.numeric(participants),
participants_category = as.factor(participants_category),
protestnumber = as.integer(protestnumber),
protesterviolence = as.factor(protesterviolence),
startmonth = as.integer(startmonth),
startyear = as.integer(startyear),
endday = as.integer(endday),
endmonth = as.integer(endmonth),
endyear = as.integer(endyear),
region = as.factor(region),
country = as.factor(country)
)
## Known warning message for participants NA numeric data
###### reassign levels of factor variable: participants_category ######
levels(PreprocData_transformed$participants_category) <- list(
">10000" = ">10000",
"100-999" = "100-999",
"1000-1999" = "1000-1999",
"2000-4999" = "2000-4999",
"50-99" = "50-99",
"5000-10000" = "5000-10000",
"NA"="NA")
rownames(PreprocData_transformed)
###### Method 1: Remove duplicate rows ######
PreprocData2 <- PreprocData_transformed[!duplicated(PreprocData_transformed), ]
###### Method 2: Remove duplicates by single column ######
PreprocData2 <- PreprocData_transformed[!duplicated(PreprocData_transformed$id), ]
###### Method 3: Using dplyr - Remove duplicate rows (all columns)
PreprocData2 <- PreprocData_transformed %>% distinct()
###### Find missing cells
is.na(PreprocData2)
###### Find rows w/ NA
complete.cases(PreprocData2)
###### Count NA
sum(is.na(PreprocData2))       ## count all missing observations
colSums(is.na(PreprocData2))   ## count the number of missing values in each column
######  Listwise NA Removal and confirmation - compare number of observations
Preproc_NArm <- na.exclude(PreprocData2)
######  Other methods of Listwise NA removal
PreprocData2[complete.cases(PreprocData2),]
na.omit(PreprocData2)
sum(is.na(PreprocData2))
PreprocData2 %>% drop_na()
######  Remove missing values of specified single column
PreprocData2 %>% drop_na(participants)
######  Remove missing values of specified multiple columns
PreprocData2 %>% drop_na(participants, protesterviolence)
######  confirm no missing observations in new df
sum(is.na(Preproc_NArm))
######  confirm no missing values in each column of new df
colSums(is.na(Preproc_NArm))
###### Impute mean for participants column ######
preproc_participants_mean_impute <- PreprocData2 %>%
mutate(participants = ifelse(is.na(participants),
mean(participants, na.rm = T),
participants))
summary(preproc_participants_mean_impute$participants)
###### Impute median for participants column ######
preproc_participants_median_impute <- PreprocData2 %>%
mutate(participants = ifelse(is.na(participants),
median(participants, na.rm = T),
participants))
summary(preproc_participants_median_impute$participants)
###### Impute mean for all numeric columns ######
preproc_mean_impute <- PreprocData2 %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), mean(x, na.rm = T), x))
summary(preproc_mean_impute)
###### Impute median for all numeric columns ######
preproc_median_impute <- PreprocData2 %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), median(x, na.rm = T), x))
summary(preproc_median_impute)
###### Group by region, Impute NAs participants & protest_length column ######
###### RUN
preproc_median_tidyimpute <- PreprocData2 %>%
group_by(region) %>%
mutate(participants = ifelse(is.na(participants),
median(participants, na.rm = TRUE),
participants))
colSums(is.na(preproc_median_tidyimpute))
######  confirm no missing observations in new df
sum(is.na(preproc_median_tidyimpute))
######  confirm no missing values in each column of new df
colSums(is.na(preproc_median_tidyimpute))
######  install.packages("mice")
######  install.packages("ggmice")
library(mice)
library(ggmice)
library(help = "mice")
?mice() ## Look at Built-in univariate imputation methods for "methods = "" & Vignettes
######  run simple multiple imputation over whole df
PreprocData_imp <- mice(PreprocData2, m = 1, seed = 31415, method = "cart")
######  list the actual imputations for startyear
PreprocData_imp$imp$startyear
######  fill data matrix
PreprocData_compl <- complete(PreprocData_imp)
View(PreprocData_compl)
colSums(is.na(PreprocData_compl))
######  use lubridate to correct date formatting
Preproc_dates <- preproc_median_tidyimpute %>%
mutate(start = lubridate::make_datetime(startyear, startday, startmonth)) %>%   ## error w/o including lubridate::
mutate(end = lubridate::make_datetime(endyear, endday, endmonth))
summary(Preproc_dates)
######  split date/time columns
###### DO NOT RUN
Preproc_dates_sep <- Preproc_dates %>%
tidyr::separate(start, c("startyear", "startday", "startmonth"))  %>%
tidyr::separate(end, c("endyear", "endday", "endmonth"))
summary(Preproc_dates)
######  computing new variables w/ multiple existing w/difftime()?
Preproc_dates$protest_length = difftime(Preproc_dates$end, Preproc_dates$start, units = "days")
View(Preproc_dates)
###### Review summary stats of df to select numeric columns with possible outliers
summary(Preproc_join)
View(Preproc_join)
Preproc_join <- Preproc_dates %>%
dplyr::semi_join(Preproc_dates, global_population, by = c("country", "startyear"))
View(Preproc_join)
## read in and format raw population df
global_population <- read_csv("../Data/population.csv") %>%
rename("country"="Country Name",
"population"="Value") %>%
select(-"Country Code")
## check changes
head(global_population)
## match population by country and startyear
Preproc_join <- Preproc_dates %>%
dplyr::semi_join(Preproc_dates, global_population, by = c("country", "startyear"))
View(Preproc_join)
###### Review summary stats of df to select numeric columns with possible outliers
summary(Preproc_join)
###### Visual approach: Histogram, scatter plot, and boxplot
#par(mfrow=c(1,1))
hist(Preproc_join$participants, main = "Histogram")
boxplot(Preproc_join$participants, main = "Boxplot")
plot(Preproc_join$region, Preproc_join$participants)
plot(Preproc_join$region, Preproc_join$protest_length)
qqnorm(Preproc_join$participants, main = "Normal Q-Q plot")
###### IQR method on participants column ######
Preproc_OutIQR <- Preproc_join %>%
select(id, region, country, protest, protestnumber, participants, start, end, participants, protesterviolence) %>%
group_by(participants) %>%
mutate(IQR = IQR(Preproc_join$participants),
O_upper = quantile(participants, probs=c( .75), na.rm = FALSE)+1.5*IQR,
O_lower = quantile(participants, probs=c( .25), na.rm = FALSE)-1.5*IQR
) %>%
filter(O_lower <= participants & participants <= O_upper)
## Results: Shows No outliers present
dim(Preproc_join)
dim(Preproc_OutIQR)
###### Mean +/- 3 Standard Deviations
ptps = Preproc_join$participants
mean = mean(ptps)
std = sd(ptps)
Tmin = mean-(3*std)  ##find outliers
Tmax = mean+(3*std)
ptps[which(ptps < Tmin | ptps > Tmax)]   ##remove outliers
ptps[which(ptps > Tmin & ptps < Tmax)]
###### Median Absolute Deviation (MAD)
med = median(ptps)
abs_dev = abs(ptps-med)
mad = 1.4826 * median(abs_dev)
Tmin = med-(3*mad)
Tmax = med+(3*mad)
ptps[which(ptps < Tmin | ptps > Tmax)]
ptps[which(ptps > Tmin & ptps < Tmax)]
